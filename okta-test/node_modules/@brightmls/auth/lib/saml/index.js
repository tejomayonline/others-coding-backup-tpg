"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SamlServiceProvider = exports.makeSPConfig = exports.makeIdpConfig = void 0;
const samlify = __importStar(require("samlify"));
/* tslint:disable-next-line */
const validator = __importStar(require("@authenio/samlify-node-xmllint"));
samlify.setSchemaValidator(validator); // library requires a validator
/**
 * Create Idp settings for instance
 *
 *@param metadata required Identity Provider metadata
 * @param privateKey optional private key
 * @param privateKeyPass optional private key password
 * @param encPrivateKey optional encryption key
 * @param encPrivateKeyPass optional encryption key password
 * @param isAssertionEncrypted optional encrypted assertion flag
 * @returns Idp Settings
 */
const makeIdpConfig = (metadata, privateKey, privateKeyPass, encPrivateKey, encPrivateKeyPass, isAssertionEncrypted) => {
    return {
        // required
        metadata,
        // optional
        privateKey,
        privateKeyPass,
        encPrivateKey,
        encPrivateKeyPass,
        isAssertionEncrypted,
    };
};
exports.makeIdpConfig = makeIdpConfig;
/**
 * Create Service Provider setting for SP instance
 *
 * @param metadata required Service Provider metadata
 * @param privateKey optional private key
 * @param privateKeyPass optional private key password
 * @param encPrivateKey optional encryption key
 * @param encPrivateKeyPass optional encryption key password
 * @returns SP Settings
 */
const makeSPConfig = (metadata, privateKey, privateKeyPass, encPrivateKey, encPrivateKeyPass) => {
    return {
        // required
        metadata,
        // optional
        privateKey,
        privateKeyPass,
        encPrivateKey,
        encPrivateKeyPass,
    };
};
exports.makeSPConfig = makeSPConfig;
/**
 * Handles SAML Service Provider operations
 */
class SamlServiceProvider {
    /**
     * Constructor, takes Idp and SP settings
     *
     * @param idpOptions Identity Provider settings
     * @param spOptions Service Provider settings
     */
    constructor(idpOptions, spOptions) {
        this.idp = samlify.IdentityProvider(idpOptions);
        this.sp = samlify.ServiceProvider(spOptions);
    }
    /**
     * Parse the IDP response and return attributes
     *
     * @param request the SAML HTTP Request
     * @param binding the binding (default post)
     * @returns attributes from login response
     */
    async parseResponse(request, binding = 'post') {
        const { extract } = await this.sp.parseLoginResponse(this.idp, binding, request);
        return extract.attributes;
    }
}
exports.SamlServiceProvider = SamlServiceProvider;
//# sourceMappingURL=index.js.map