import * as samlify from 'samlify';
import { IdentityProviderSettings, ServiceProviderSettings } from 'samlify/types/src/types';
/**
 * HTTP Request is untyped in underlying module
 */
export interface SamlHttpRequest {
    query?: Record<string, string>;
    body?: Record<string, string>;
    octetString?: string;
}
/**
 * Create Idp settings for instance
 *
 *@param metadata required Identity Provider metadata
 * @param privateKey optional private key
 * @param privateKeyPass optional private key password
 * @param encPrivateKey optional encryption key
 * @param encPrivateKeyPass optional encryption key password
 * @param isAssertionEncrypted optional encrypted assertion flag
 * @returns Idp Settings
 */
export declare const makeIdpConfig: (metadata: string, privateKey?: string, privateKeyPass?: string, encPrivateKey?: string, encPrivateKeyPass?: string, isAssertionEncrypted?: boolean) => IdentityProviderSettings;
/**
 * Create Service Provider setting for SP instance
 *
 * @param metadata required Service Provider metadata
 * @param privateKey optional private key
 * @param privateKeyPass optional private key password
 * @param encPrivateKey optional encryption key
 * @param encPrivateKeyPass optional encryption key password
 * @returns SP Settings
 */
export declare const makeSPConfig: (metadata: string, privateKey?: string, privateKeyPass?: string, encPrivateKey?: string, encPrivateKeyPass?: string) => ServiceProviderSettings;
/**
 * Handles SAML Service Provider operations
 */
export declare class SamlServiceProvider {
    idp: samlify.IdentityProviderInstance;
    sp: samlify.ServiceProviderInstance;
    /**
     * Constructor, takes Idp and SP settings
     *
     * @param idpOptions Identity Provider settings
     * @param spOptions Service Provider settings
     */
    constructor(idpOptions: IdentityProviderSettings, spOptions: ServiceProviderSettings);
    /**
     * Parse the IDP response and return attributes
     *
     * @param request the SAML HTTP Request
     * @param binding the binding (default post)
     * @returns attributes from login response
     */
    parseResponse(request: SamlHttpRequest, binding?: string): Promise<any>;
}
//# sourceMappingURL=index.d.ts.map